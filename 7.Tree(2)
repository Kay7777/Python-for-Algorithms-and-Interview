1.Tree Traversals
    Preorder: In a preirder travesal, we visit the root node first, then recurively do a preorder traversal
              of the left subtree, followed by a recursive preorder traversal of the right subtree.
    Inorder:In an inorder traversal, we recusively do an inorder traversal on the left subtree,
            visit the roo nodem and finally do a recursive inorder traversal of the right subtree.
    Postorder: In a postorder traversal, we recursively do a postorder traversal of the left subtree and the right subtree folowed 
                by a visit to the root node.
                
  
2. Priority Queues with Binary Heaps
    One importantvariation of a queue is called a priority queue.
    A prioeity queue acts like a queue in that you dequeue an item by removing it from the front.
    However, in a priority queue the logical order of items inside a queue is determined 
    by their priority.
    The highest priority items are at the front of the queue and the lowest priority items are at the back.
    When you enqueue an item on a prority queue,the nre item may move all the way to tehe front.
    The calssic way to implement a proirity queue is using a data structure called abinary heap!
    A binary heao will allow us both enqueue and dequeue items in O(logn).
    Two kinds of the heap: min heap and max hea
    Min heap:the smallest key is always ar ethe front
    Max heap: the largest key value is always at hte front!
    
    A balanced binary tree has roughly the same num of nodes in the left and right subtrees of the root.
    In our heap implement we keep the tree balanced by creating a complete bianry tree
    A complete binary tree is a tree in which each level has all of its nodes.
    
3. Implement for Binary heaps
    ## we begin from the n//2 and downto 1 ## because nodes from n//2 to n are all leaves.
    steps: Build_max_heap from unordered array  O(n)
            Find max element A[1]           O(1)
            Swap elements A[n] with A[1], now the max element is at the end of array  O(1)
            Discard node n from heap, decrementing heap size
            New root may violete max heap but children are max heaps max heapify  O(lgn) 
            And repaeat from 2, totally n steps
            
    ## Code Implement! ##        
    class BinHeap:
        def __init__(self):
           self.heapList = [0]
           self.currentSize = 0
  
        def percUp(self,i):
            while i // 2 > 0:
                if self.heapList[i] < self.heapList[i // 2]:
             
                    tmp = self.heapList[i // 2]
                    self.heapList[i // 2] = self.heapList[i]
                    self.heapList[i] = tmp
                i = i // 2
   
        def insert(self,k):

            self.heapList.append(k)
            self.currentSize = self.currentSize + 1
            self.percUp(self.currentSize)
        def percDown(self,i):
            while (i * 2) <= self.currentSize:
                mc = self.minChild(i)
                if self.heapList[i] > self.heapList[mc]:
                    tmp = self.heapList[i]
                   self.heapList[i] = self.heapList[mc]
                   self.heapList[mc] = tmp
                i = mc
  
       def minChild(self,i):
            if i * 2 + 1 > self.currentSize:
                return i * 2
            else:
                if self.heapList[i*2] < self.heapList[i*2+1]:
                    return i * 2
                else:
                    return i * 2 + 1
    
        def delMin(self):
            retval = self.heapList[1]
            self.heapList[1] = self.heapList[self.currentSize]
            self.currentSize = self.currentSize - 1
            self.heapList.pop()
            self.percDown(1)
           return retval
  
       def buildHeap(self,alist):
            i = len(alist) // 2
           self.currentSize = len(alist)
            self.heapList = [0] + alist[:]
            while (i > 0):
                self.percDown(i)
                i = i - 1
    
