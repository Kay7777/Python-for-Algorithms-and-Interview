1. In Python:
    we can use in to do search like 15 in [1,2,15]
    
2. Sequential Search
    Basic searching technique, sequentially go through the data structure, camparing elements as you go along.
    
    #### random array Implement:
    def seq_search(arr,ele):
        pos = 0
        found = False
        while pos < len(arr) and not found:
            if arr[pos] == ele:
                found = True
            else:
                pos += 1
        return found
    arr = [1,2,3,4,5]
    print(seq_search(arr,6))
    print(seq_search(arr,3))
    
    ### orderes array Implement
    def ord_seq_search(arr,ele):
        pos = 0
        found = False
        stopped = False

        while pos < len(arr) and not found and not stopped:
            if arr[pos] == ele:
                found = True
            else:
                if arr[pos] > ele:
                    stopped = True
                else:
                    pos += 1
        return found
    arr = [1,2,3,4,5]
    print(ord_seq_search(arr,6))
    print(ord_seq_search(arr,3))
    
    
    
3. Binary Search
    A bianry search will strat by examing the middle item. If that  item si the one we are searching for, we are done.
    If the item aawe are searching for is greater than the middle item, we know tht the entire lowerhalf og the list as the middle item
    ca nbe eliminated from fuither consideration. The item, if it is i nthe list, must be in the uppaer half.
    We can the repeat the rocess with the uer half. Start at the middle item and compare it against what we are looking for.
    Again, we either find it or slit the list in half, therefore eliminating another large art of our possible search space.
    
    ### Implement:
    def binary_search(arr,ele):
        first = 0
        last = len(arr)-1
        found = False
        while first<=last and not found:
            mid = (first+last)//2
            if arr[mid] == ele:
                found = True
            else:
                if ele < arr[mid]:
                    last = mid-1
                else:
                    first = mid + 1
        return found
    arr = [1,2,3,4,5,6,7,8,9,10]
    print(binary_search(arr,4))
    
    ### use recursion to solve!!
    def rec_bin_search(arr,ele):
        if len(arr)==0:
            return False
        else:
            mid = len(arr)//2
            if arr[mid] == ele:
                return True
            else:
                if ele<arr[mid]:
                    return rec_bin_search(arr[:mid],ele)
                else:
                    return rec_bin_search(arr[mid+1:],ele)

