1.BST property
    A binary search tree relies on the property that keys that are ledd than the parent are found
    in the left subtree, and keys that are greater thrn thr parent are found in the right subtree.
    The fact that keys that are less then that parent node are found in the left subtree and keys that are greater than the parent node 
    are found in the irght subtree. 
    Notice that BST property only refers to the direct parent not the entire tree.
    The BinarySearchTree class has a reference to the TreeNode that is the root of the bianry search tree.
    In most cases the external methods defined in the outer class simply check to see if the tree is empty.
    If there are nodes in the tree, the request is just passed on to a private method defined in the bianrysearchtree class that takes 
    the root as parameter.
    In the case where the reww is empty or we want to delete the key at the root of the tree, we must take special action.
    
    ###
    Put method: check to see if the tree already has a root
                if there is not a root then put will create a new TreeNode and install it as the root fo the tree.
                if a root node is already in place the nput calls the provate, recursive, helper funtion put to search the tree according
                to the folloing algorithm:
                Starting at the root of the tree, search the bianry tree comoaring the new key tothe key in the cutrrent node.
                If the new key is less than the current node, search the left subtree. 
                If the new key is greater than the current node, search the right subtree.
                When there is no left ot right child to search, we have found the position in the tree where the new node should be installed\
                To add a node to the tree, create a new TreeNode object and insert the object at the point discovered in the previous step.
                
                
     ### Code Implement!
     def put(self,key,val):
        if self.root:
            self._put(key,val,self.root)
        else:
            self.root = TreeNode(key,val)
        self.size = self.size + 1

      def _put(self,key,val,currentNode):
          if key < currentNode.key:
              if currentNode.hasLeftChild():
                     self._put(key,val,currentNode.leftChild)
              else:
                     currentNode.leftChild = TreeNode(key,val,parent=currentNode)
          else:
              if currentNode.hasRightChild():
                     self._put(key,val,currentNode.rightChild)
              else:
                     currentNode.rightChild = TreeNode(key,val,parent=currentNode)
                     
                     
       def delete(self,key):

            if self.size > 1:

                nodeToRemove = self._get(key,self.root)
                if nodeToRemove:
                    self.remove(nodeToRemove)
                    self.size = self.size-1
                else:
                    raise KeyError('Error, key not in tree')
            elif self.size == 1 and self.root.key == key:
                self.root = None
                self.size = self.size - 1
            else:
                raise KeyError('Error, key not in tree')

        def __delitem__(self,key):

            self.delete(key)
            
            
     Deleting has three cases!
     1. delete a leaf
     2. delete a parent with only one child: let his child up to his level
     3. delete a parent with two children: find a successor: 
         go down their children and find one bigger than left and smaller than right and only have one or no child
     
